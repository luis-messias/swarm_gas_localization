<!-- mission file for GADEN player -->

<launch>  
    
    <arg name="scenario" default="third_empty_room" />
        
    ### NODE environment (for RVIZ visualization) ###
    <node pkg="gaden_environment" type="environment" name="environment" output="screen">
	    <param name="verbose" value="false"/>
        <param name="wait_preprocessing" value="false"/>    	  ### wait for the ok from gaden_preprocessing before running
        <param name="fixed_frame" value="map"/>
        
	    # Plot CAD models (Collada format .dae)
	    <param name="number_of_CAD" value="3"/>
	    <rosparam subst_value="True">
            CAD_0: package://test_env/$(arg scenario)/cad_models/06x04_walls.dae
            CAD_0_color: [0.92, 0.96, 0.96]
           
            CAD_1: package://test_env/$(arg scenario)/cad_models/06x04_door_left.dae
            CAD_1_color: [0.96, 0.17, 0.3]
            
            CAD_2: package://test_env/$(arg scenario)/cad_models/06x04_door_right.dae
            CAD_2_color: [0.96, 0.17, 0.3]
        </rosparam>
	    
	    # Plot 3D OccupancyGridmap
	    <param name="occupancy3D_data" value="$(find test_env)/$(arg scenario)/OccupancyGrid3D.csv" />
	    
	    # Plot gas sources
        <param name="number_of_sources" value="1"/>
        <rosparam>
            source_0_position_x: 0.1
            source_0_position_y: 0.2
            source_0_position_z: 0.05
            source_0_scale: 0.02
            source_0_color: [0.0, 1.0, 0.0] 
        </rosparam>
	
    </node>
    

	 ### Filament Simulator 01ms###
    <node pkg="gaden_filament_simulator" type="filament_simulator" name="filament_simulator01dyn" output="screen">
        <param name="verbose" value="false" />
        <param name="wait_preprocessing" value="false"/>    	 ### wait for the ok from preprocessing before starting the simulation
	    <param name="sim_time" value="900" />                    ### [sec] Total time of the gas dispersion simulation
	    <param name="time_step" value="0.2" />                   ### [sec] Time increment between snapshots. Set aprox = cell_size/max_wind_speed.
	    <param name="num_filaments_sec" value="50" />            ### Num of filaments released each second
	    <param name="variable_rate" value="false" />              ### If true the number of released filaments would be random(0,numFilaments_sec) 			original:true
        <param name="ppm_filament_center" value="10"/>           ### [ppm] Gas concentration at the center of the 3D gaussian (filament)
        <param name="filament_initial_std" value="10"/>          ### [cm] Sigma of the filament at t=0-> 3DGaussian shape
        <param name="filament_growth_gamma" value="10"/>         ### [cmÂ²/s] Growth ratio of the filament_std
        <param name="filament_noise_std" value="0.02"/>          ### [m] Range of the white noise added on each iteration
	    <param name="gas_type" value="0" />                      ### 0=Ethanol, 1=Methane, 2=Hydrogen, 6=Acetone
	    <param name="temperature" value="298"/>                  ### [Kelvins]
	    <param name="pressure" value="1"/>                       ### [Atm]
	    <param name="concentration_unit_choice" value="1"/>      ### 0=molecules/cm3, 1=ppm (when ppm is used, set temp and pressure accordingly)	    	    	    	    
	    # In the occupancyGrid.csv file we set: cell_size, num_cells, etc. which come from the CFD wind simulation
	    <param name="occupancy3D_data" value="$(find test_env)/$(arg scenario)/OccupancyGrid3D.csv" />
	    <param name="fixed_frame" value="map"/>
	    
	    # WindFlow data (from CFD)
	    <param name="wind_data" value="$(find test_env)/$(arg scenario)/wind_simulations/dynamic/wind_at_cell_centers_" />
	    <param name="wind_time_step" value="1" />                ### (sec) time increment between Wind snapshots
	    # Loop options
        <param name="/allow_looping" value="true" />
        <param name="/loop_from_step" value="0" />
        <param name="/loop_to_step" value="5" />
	    
	    # Location of the release point!
	    <param name="source_position_x" value="0.1"/>            ### (m)
	    <param name="source_position_y" value="0.2"/>            ### (m)
	    <param name="source_position_z" value="0.05"/>            ### (m)
	    
	    <param name="save_results" value="1" />                  #1=true, 0=false
	    <param name="restuls_time_step" value="0.5" />           #(sec) Time increment between saving state to file
	    <param name="results_min_time" value="0.0" />            #(sec) Time to start saving results to file
	    <param name="results_location" value="$(find test_env)/$(arg scenario)/gas_simulations" />
    </node>
      

    ### NODE PLAYER ###
    #-------------------
    <node pkg="gaden_player" type="gaden_player" name="gaden_player" output="screen">
        <param name="verbose" value="false" />
	    <param name="player_freq" value="2" />         ###(Hz) Freq for loading the simulation log_files
	    <param name="initial_iteration" value="0" />
	    <param name="num_simulators" value="1" />      ### Number of simulations to load [1-inf] (useful for multiple sources and gases)
    
        # Data from the "filament_simulator" pkg. Multiple sources can be set here
        <param name="simulation_data_0" value="$(find test_env)/$(arg scenario)/gas_simulations/FilamentSimulation_gasType_0_sourcePosition_0.10_0.20_0.05_iteration_" />
       
        
        # Loop options        
        <param name="allow_looping" value="true" />
        <param name="loop_from_iteration" value="0" />
        <param name="loop_to_iteration" value="298" />
        
    </node>
   
        
   
   
    ### NODE Simulated Gas Sensor ###
    #--------------------------------
    # SENSOR MODELS: 
    # MOX: TGS2620=0, TGS2600=1, TGS2611=2
    # PID: MiniRaeLite=30
   
    <group ns="Mox00">
        <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="fake_mox" output="screen">
	        <param name="/sensor_model" value="2" />
	        <param name="/sensor_frame" value="mox0_frame" />
	        <param name="/fixed_frame" value="map"/>
        </node>        
    </group> 
    
    <group ns="Mox01">
        <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="fake_mox" output="screen">
	        <param name="/sensor_model" value="1" />
	        <param name="/sensor_frame" value="mox1_frame" />
	        <param name="/fixed_frame" value="map"/>	        
        </node>
    </group> 

    <group ns="Mox02">
        <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="fake_mox" output="screen">
	        <param name="/sensor_model" value="0" />
	        <param name="/sensor_frame" value="mox2_frame" />
	        <param name="/fixed_frame" value="map"/>	        
        </node>
    </group>

    <group ns="Mox03">
        <node pkg="simulated_gas_sensor" type="simulated_gas_sensor" name="fake_mox" output="screen">
	        <param name="/sensor_model" value="1" />
	        <param name="/sensor_frame" value="mox3_frame" />
	        <param name="/fixed_frame" value="map"/>	        
        </node>
    </group>

    

    ### NODE Simulated Wind Sensor ###
    #---------------------------------

    


    ### RQT PLOT Sensors ###
    #-----------------------
    <node pkg="rqt_plot" type="rqt_plot" name="rqt_plot1"  args="/Mox00/Sensor_reading/raw /Mox01/Sensor_reading/raw /Mox02/Sensor_reading/raw /Mox03/Sensor_reading/raw    "/>
     
     
  
    # MAP SERVER
    <node pkg="map_server" type="map_server" name="map_server" args="$(find test_env)/$(arg scenario)/occupancy.yaml" />
  
    ### RVIZ ###
    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find test_env)/$(arg scenario)/launch/ros/gaden.rviz"/>
</launch>
